const database = require("../db");

async function getAccuracy() {
  try {
    const result = await database.query(
      `SELECT * FROM sleep_history
        WHERE planned_start >= NOW() - INTERVAL '8 days';`
    );
    if (result.length == 0) {
      console.log("No data in database");
    }
    return result.rows;
  } catch (error) {
    throw new Error("failed to get data " + error.message);
  }
}

async function getAvrgTemp() {
  try {
    const result = await database.query(
      `SELECT 
      AVG(room_temperature) AS average_temperature,
      AVG(room_humidity) AS average_humidity
      FROM environment_history
      WHERE stored_on >= NOW() - INTERVAL '8 days';`
    );
    if (result.rows.length == 0) {
      console.log("No data in database");
    }
    return result.rows;
  } catch (error) {
    throw new Error("failed to get data " + error.message);
  }
}

async function getTemp() {
  try {
    const result = await database.query(
      `SELECT *
      FROM environment_history
      WHERE DATE(stored_on) = CURRENT_DATE;`
    );

    console.log(result.rows);
    if (result.rows.length == 0) {
      console.log("No data in database");
    }
    return result.rows[0];
  } catch (error) {
    throw new Error("failed to get data " + error.message);
  }
}

async function getPhoneData() {
  try {
    const result = await database.query(
      `SELECT id, planned_start, planned_end, actual_start, actual_end, total_phone_use AS phone_usage
       FROM sleep_history
       WHERE planned_start >= NOW() - INTERVAL '8 days';`
    );
    if (result.rows.length === 0) {
      console.log("No data in database");
    }
    return result.rows;
  } catch (error) {
    throw new Error("Failed to get data: " + error.message);
  }
}

async function getHabitsScreenTime() {
  try {
    const result = await database.query(
      //Query taken from Chat-GPT
      `SELECT 
        sh.planned_end,
        sh.total_phone_use AS phone_usage,
        (CAST(cp.json_value::json->>'allowed_after_wake_minutes' AS INTEGER) +
         CAST(cp.json_value::json->>'allowed_before_sleep_minutes' AS INTEGER)) AS total_allowed_minutes
     FROM 
        sleep_history sh,
        configuration_pairs cp
     WHERE 
        sh.planned_end >= NOW() - INTERVAL '7 days'
        AND cp.id = 'SCRNT';`
    );


    if (result.rows.length === 0) {
      console.log("No data in database");
    }

    return result.rows;
  } catch (error) {
    throw new Error("Failed to get data: " + error.message);
  }
}

async function getScoreData() {
  try {
    const result = await database.query(
      `SELECT score
       FROM sleep_history
       WHERE planned_start >= NOW() - INTERVAL '8 days';`
    );

    console.log("REEEEES: ", result.rows);

    return result.rows;
  } catch (error) {
    throw new Error("Failed to get score: " + error.message);
  }
}

//Query generated by Chat Gpt
async function getSleepData() {
  try {
    const result = await database.query(
      `SELECT
  TO_CHAR(
    TO_TIMESTAMP(
      AVG(EXTRACT(EPOCH FROM (actual_start::time)))
    ),
    'HH24:MI'
  ) AS avg_actual_start,
  TO_CHAR(
    TO_TIMESTAMP(
      AVG(
        CASE 
          WHEN EXTRACT(HOUR FROM actual_end) < 12 
          THEN EXTRACT(EPOCH FROM actual_end::time) + 86400  -- next day adjustment
          ELSE EXTRACT(EPOCH FROM actual_end::time)
        END
      )
    ) - INTERVAL '24 hours' * 
        (CASE 
          WHEN AVG(
            CASE 
              WHEN EXTRACT(HOUR FROM actual_end) < 12 
              THEN 1 
              ELSE 0 
            END
          ) >= 0.5 THEN 1 ELSE 0 END),
    'HH24:MI'
  ) AS avg_actual_end
FROM sleep_history
WHERE actual_start >= DATE_TRUNC('week', CURRENT_DATE);`
    );

    if (result.rows.length === 0) {
      console.log("No score data for today");
      return null;
    }
    return result.rows;
  } catch (error) {
    throw new Error("Failed to get score: " + error.message);
  }
}

async function setUserNote(user_note) {
  try {
    const result = await database.query(
      `UPDATE sleep_history
       SET user_note = $1
       WHERE DATE(actual_end) = CURRENT_DATE`,
      [user_note]
    );
    console.log("Dream note updated successfully");
    console.log("RES: ", result);
    return {
      message: "Recording note updated successfully",
      user_note,
    };
  } catch (error) {
    throw new Error("Failed to set dream note: " + error.message);
  }
}
async function getDreamNotes() {
  try {
    const result = await database.query(
      `SELECT 
        planned_start,
        user_note
       FROM sleep_history
       WHERE user_note IS NOT NULL 
         AND user_note != ''
       ORDER BY planned_start DESC;`
    );
    return result.rows;
  } catch (error) {
    throw new Error("Failed to get dream notes: " + error.message);
  }
}

async function getAvrgTempNight() {
  try {
    //Query genereted by Co-pilot - not our own query 
   const result = await database.query(
     `SELECT 
  AVG(room_temperature) AS average_temperature,
  AVG(room_humidity) AS average_humidity
  FROM environment_history
  WHERE 
  stored_on >= (CURRENT_DATE - INTERVAL '1 day') + TIME '21:00:00'
  AND stored_on < CURRENT_DATE + TIME '10:00:00';`
  );
  return result.rows[0];
  } catch (error) {}
}

module.exports = {
  getAccuracy,
  getAvrgTemp,
  getTemp,
  getPhoneData,
  getScoreData,
  getSleepData,
  getAccuracy,
  getPhoneData,
  getHabitsScreenTime,
  getDreamNotes,
  setUserNote,
  getAvrgTempNight,
};
