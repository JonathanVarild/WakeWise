const database = require("../db");

async function getAccuracy() {
  try {
    console.log("Hej");

    const result = await database.query(
      `SELECT * FROM sleep_history
        WHERE planned_start >= NOW() - INTERVAL '7 days';`
    );
    if (result.length == 0) {
      console.log("No data in database");
    }
    return result.rows;
  } catch (error) {
    throw new Error("failed to get data " + error.message);
  }
}

async function getTemp() {
  try {
    const result = await database.query(
      `SELECT 
      AVG(room_temperature) AS average_temperature,
      AVG(room_humidity) AS average_humidity
      FROM environment_history
      WHERE stored_on >= NOW() - INTERVAL '7 days';`
    );
    if (result.rows.length == 0) {
      console.log("No data in database");
    }
    return result.rows;
  } catch (error) {
    throw new Error("failed to get data " + error.message);
  }
}

async function getPhoneData() {
  try {
    const result = await database.query(
      `SELECT id, planned_start, planned_end, actual_start, actual_end, total_phone_use AS phone_usage
         FROM sleep_history
         WHERE planned_start >= NOW() - INTERVAL '7 days';`
    );
    if (result.rows.length === 0) {
      console.log("No data in database");
    }
    return result.rows;
  } catch (error) {
    throw new Error("Failed to get data: " + error.message);
  }
}

async function getScoreData() {
  try {
    const result = await database.query(
      `SELECT score
       FROM sleep_history
       WHERE DATE(planned_start) = CURRENT_DATE
       ORDER BY actual_end DESC
       LIMIT 1;`
    );

    if (result.rows.length === 0) {
      console.log("No score data for today");
      return null;
    }

    return result.rows[0].score;
  } catch (error) {
    throw new Error("Failed to get score: " + error.message);
  }
}

//Query generated by Chat Gpt
async function getSleepData() {
  try {
    const result = await database.query(
      `SELECT
  TO_CHAR(
    TO_TIMESTAMP(
      AVG(EXTRACT(EPOCH FROM (actual_start::time)))
    ),
    'HH24:MI'
  ) AS avg_actual_start,
  TO_CHAR(
    TO_TIMESTAMP(
      AVG(
        CASE 
          WHEN EXTRACT(HOUR FROM actual_end) < 12 
          THEN EXTRACT(EPOCH FROM actual_end::time) + 86400  -- next day adjustment
          ELSE EXTRACT(EPOCH FROM actual_end::time)
        END
      )
    ) - INTERVAL '24 hours' * 
        (CASE 
          WHEN AVG(
            CASE 
              WHEN EXTRACT(HOUR FROM actual_end) < 12 
              THEN 1 
              ELSE 0 
            END
          ) >= 0.5 THEN 1 ELSE 0 END),
    'HH24:MI'
  ) AS avg_actual_end
FROM sleep_history
WHERE actual_start >= DATE_TRUNC('week', CURRENT_DATE);`
    );

    if (result.rows.length === 0) {
      console.log("No score data for today");
      return null;
    }

    return result.rows;
  } catch (error) {
    throw new Error("Failed to get score: " + error.message);
  }
}

module.exports = {
  getAccuracy,
  getTemp,
  getPhoneData,
  getScoreData,
  getSleepData,
};
